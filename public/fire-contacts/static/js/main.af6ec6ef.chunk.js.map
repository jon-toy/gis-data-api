{"version":3,"sources":["components/AppBar.js","components/ContactTable.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","commandComponents","add","onExecute","style","textAlign","Button","color","onClick","edit","IconButton","delete","window","confirm","commit","cancel","Command","id","CommandButton","availableValues","department","type","LookupEditCell","withStyles","lookupEditCell","padding","dialog","width","inputRoot","textField","marginLeft","name","availableColumnValues","value","onValueChange","TableCell","Select","onChange","event","target","input","Input","map","item","MenuItem","key","Cell","props","EditCell","column","getRowId","row","useState","columns","rows","setRows","useEffect","a","axios","result","data","fetchData","columnName","tableColumnExtensions","direction","sorting","getSorting","editingRowIds","getEditingRowIds","addedRows","setAddedRows","rowChanges","setRowChanges","currentPage","setCurrentPage","pageSize","setPageSize","pageSizes","columnOrder","setColumnOrder","TableEditColumn","COLUMN_TYPE","leftFixedColumns","updateServer","post","then","response","console","log","catch","error","Paper","onSortingChange","onCurrentPageChange","onPageSizeChange","onEditingRowIdsChange","onRowChangesChange","onAddedRowsChange","Object","keys","length","onCommitChanges","changedRows","added","changed","deleted","startingAddedId","index","deletedIds","rowsForDelete","slice","forEach","rowId","findIndex","splice","deleteRows","ret","replace","filter","test","alert","columnExtensions","cellComponent","order","onOrderChange","showSortingControls","showAddCommand","showEditCommand","showDeleteCommand","commandComponent","leftColumns","App","password","authenticated","state","setState","ContactTable","TextField","label","fullWidth","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af6ec6ef.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Apache County Fire Contacts\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React, { useState, useEffect } from 'react';\nimport {\n  SortingState, EditingState, PagingState,\n  IntegratedPaging, IntegratedSorting,\n} from '@devexpress/dx-react-grid';\nimport {\n  Grid,\n  Table, TableHeaderRow, TableEditRow, TableEditColumn,\n  PagingPanel, DragDropProvider, TableColumnReordering,\n  TableFixedColumns,\n} from '@devexpress/dx-react-grid-material-ui';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport Input from '@material-ui/core/Input';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\n\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport axios from 'axios';\n\nconst styles = theme => ({\n  lookupEditCell: {\n    padding: theme.spacing(1),\n  },\n  dialog: {\n    width: 'calc(100% - 16px)',\n  },\n  inputRoot: {\n    width: '100%',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '100%',\n  },\n});\n\nconst AddButton = ({ onExecute }) => (\n  <div style={{ textAlign: 'center' }}>\n    <Button\n      color=\"primary\"\n      onClick={onExecute}\n      title=\"Create new row\"\n    >\n      New\n    </Button>\n  </div>\n);\n\nconst EditButton = ({ onExecute }) => (\n  <IconButton onClick={onExecute} title=\"Edit row\">\n    <EditIcon />\n  </IconButton>\n);\n\nconst DeleteButton = ({ onExecute }) => (\n  <IconButton\n    onClick={() => {\n      // eslint-disable-next-line\n      if (window.confirm('Are you sure you want to delete this row?')) {\n        onExecute();\n      }\n    }}\n    title=\"Delete row\"\n  >\n    <DeleteIcon />\n  </IconButton>\n);\n\nconst CommitButton = ({ onExecute }) => (\n  <IconButton onClick={onExecute} title=\"Save changes\">\n    <SaveIcon />\n  </IconButton>\n);\n\nconst CancelButton = ({ onExecute }) => (\n  <IconButton color=\"secondary\" onClick={onExecute} title=\"Cancel changes\">\n    <CancelIcon />\n  </IconButton>\n);\n\nconst commandComponents = {\n  add: AddButton,\n  edit: EditButton,\n  delete: DeleteButton,\n  commit: CommitButton,\n  cancel: CancelButton,\n};\n\nconst Command = ({ id, onExecute }) => {\n  const CommandButton = commandComponents[id];\n  return (\n    <CommandButton\n      onExecute={onExecute}\n    />\n  );\n};\n\nconst availableValues = {\n  department: [\"DISPATCH\", \"ALPINE\", \"EAGAR\", \"GREER\", \"VERNON\", \"DEV\"],\n  type: [\"EMAIL\", \"PHONE\"]\n};\n\nconst LookupEditCellBase = ({\n  availableColumnValues, value, onValueChange, classes,\n}) => (\n  <TableCell\n    className={classes.lookupEditCell}\n  >\n    <Select\n      value={value}\n      onChange={event => onValueChange(event.target.value)}\n      input={(\n        <Input\n          classes={{ root: classes.inputRoot }}\n        />\n)}\n    >\n      {availableColumnValues.map(item => (\n        <MenuItem key={item} value={item}>\n          {item}\n        </MenuItem>\n      ))}\n    </Select>\n  </TableCell>\n);\nexport const LookupEditCell = withStyles(styles, { name: 'ControlledModeDemo' })(LookupEditCellBase);\n\nconst Cell = (props) => {\n  return <Table.Cell {...props} />;\n};\n\nconst EditCell = (props) => {\n  const { column } = props;\n  const availableColumnValues = availableValues[column.name];\n  if (availableColumnValues) {\n    return <LookupEditCell {...props} availableColumnValues={availableColumnValues} />;\n  }\n  return <TableEditRow.Cell {...props} />;\n};\n\nconst getRowId = row => row.id;\n\nexport default () => {\n  const [columns] = useState([\n    { name: 'department', title: 'Department' },\n    { name: 'name', title: 'Name' },\n    { name: 'type', title: 'Type' },\n    { name: 'value', title: 'Value' },\n  ]);\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios(\n        'https://apachecountyfirecontact.firebaseio.com/fire/contacts.json',\n      );\n      setRows(result.data);\n    };\n    fetchData();\n  }, []);\n\n  const [tableColumnExtensions] = useState([\n    { columnName: 'department'},\n    { columnName: 'name'},\n    { columnName: 'type'},\n    { columnName: 'value'},\n  ]);\n  const [sorting, getSorting] = useState([{ columnName: 'department', direction: 'asc' }]);\n  const [editingRowIds, getEditingRowIds] = useState([]);\n  const [addedRows, setAddedRows] = useState([]);\n  const [rowChanges, setRowChanges] = useState({});\n  const [currentPage, setCurrentPage] = useState(0);\n  const [pageSize, setPageSize] = useState(0);\n  const [pageSizes] = useState([5, 10, 0]);\n  const [columnOrder, setColumnOrder] = useState(['department', 'name', 'type', 'value']);\n  const [leftFixedColumns] = useState([TableEditColumn.COLUMN_TYPE]);\n\n  const changeAddedRows = value => setAddedRows(\n    value.map(row => (Object.keys(row).length ? row : {\n      department: availableValues.department[0],\n      name: \"\",\n      type: availableValues.type[0],\n      value: \"\"\n    })),\n  );\n\n  const deleteRows = (deletedIds) => {\n    const rowsForDelete = rows.slice();\n    deletedIds.forEach((rowId) => {\n      const index = rowsForDelete.findIndex(row => row.id === rowId);\n      if (index > -1) {\n        rowsForDelete.splice(index, 1);\n      }\n    });\n    return rowsForDelete;\n  };\n\n  const commitChanges = ({ added, changed, deleted }) => {\n    let changedRows;\n    if (added) {\n      const startingAddedId = rows.length > 0 ? rows[rows.length - 1].id + 1 : 0;\n      changedRows = [\n        ...rows,\n        ...added.map((row, index) => ({\n          id: startingAddedId + index,\n          ...row,\n        })),\n      ];\n    }\n    if (changed) {\n      changedRows = rows.map(row => (changed[row.id] ? { ...row, ...changed[row.id] } : row));\n    }\n    if (deleted) {\n      changedRows = deleteRows(deleted);\n    }\n\n    changedRows = changedRows.map(row => {\n      // Sanitize Phone number\n      if (row.type === 'PHONE') {\n        let ret = {\n          ...row,\n          value: row.value.replace(/[^0-9]/g, ''),\n        }\n        console.log(ret);\n        return ret;\n      }\n\n      return row;\n    })\n\n    const invalidRows = changedRows.filter(row => {\n      if (row.type === 'EMAIL' && !(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(row.value))) {\n        // Invalid email\n        return true;\n      }\n      else if (row.type === 'PHONE' && !(/^\\d{10}$/.test(row.value))) {\n        // Invalid phone\n        return true;\n      }\n\n      return false;\n    });\n\n    if (invalidRows.length > 0) {\n      alert(\"Invalid Entry. Phone Numbers should be 10 digits, and Email Addresses should be XXXX@XXXX.COM\");\n      return;\n    }\n\n    setRows(changedRows);\n\n    updateServer(changedRows);\n  };\n\n  const updateServer = (data) => {\n    // Store Changed Rows in webserver\n    axios.post('/fire-contacts/contacts', data)\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n      console.log(data);\n    });\n  }\n\n  return (\n    <Paper>\n      <Grid\n        rows={rows}\n        columns={columns}\n        getRowId={getRowId}\n      >\n        <SortingState\n          sorting={sorting}\n          onSortingChange={getSorting}\n        />\n        <PagingState\n          currentPage={currentPage}\n          onCurrentPageChange={setCurrentPage}\n          pageSize={pageSize}\n          onPageSizeChange={setPageSize}\n        />\n        <EditingState\n          editingRowIds={editingRowIds}\n          onEditingRowIdsChange={getEditingRowIds}\n          rowChanges={rowChanges}\n          onRowChangesChange={setRowChanges}\n          addedRows={addedRows}\n          onAddedRowsChange={changeAddedRows}\n          onCommitChanges={commitChanges}\n        />\n\n        <IntegratedSorting />\n        <IntegratedPaging />\n\n        <DragDropProvider />\n\n        <Table\n          columnExtensions={tableColumnExtensions}\n          cellComponent={Cell}\n        />\n        <TableColumnReordering\n          order={columnOrder}\n          onOrderChange={setColumnOrder}\n        />\n        <TableHeaderRow showSortingControls />\n        <TableEditRow\n          cellComponent={EditCell}\n        />\n        <TableEditColumn\n          width={170}\n          showAddCommand={!addedRows.length}\n          showEditCommand\n          showDeleteCommand\n          commandComponent={Command}\n        />\n        <TableFixedColumns\n          leftColumns={leftFixedColumns}\n        />\n        <PagingPanel\n          pageSizes={pageSizes}\n        />\n      </Grid>\n    </Paper>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport AppBar from './components/AppBar';\nimport ContactTable from './components/ContactTable';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nfunction App() {\n\n  const [state, setState] = useState({\n    password: '',\n    authenticated: false\n  });\n\n  const doAuth = () => {\n    if (state.password === 'apachecounty123') {\n      setState({authenticated: true});\n    }\n    else {\n      alert(\"Please enter the correct password to modify Fire Contacts.\");\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar/>\n      {state.authenticated === true ? \n        (<ContactTable/>) : \n        (<div>\n        <TextField\n            id=\"password\"\n            label=\"Enter Password\"\n            value={state.password}\n            onChange={(event) => {\n              setState({\n                password: event.target.value\n              });\n            }}\n            fullWidth\n            type=\"password\"\n          />\n        <Button variant=\"contained\" color=\"primary\" className=\"\" onClick={doAuth}>\n          Submit\n        </Button>\n      </div>)\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}